"""
    .
"""
import base64

from os import path
from io import BytesIO

import customtkinter
import requests

import PIL
from PIL import Image, ImageTk
import tkinter

from PIL.ImageDraw import ImageDraw

from includes.util.Logging import Logger
import cache

logger:Logger = Logger('ImageLoader')
fallback_image:tkinter.PhotoImage
fallback_user_avatar:tkinter.PhotoImage


def check_internet_connection():
    """
    Checks if there is an internet connection by attempting to make a request to a reliable URL.

    :return: True if there is an internet connection, otherwise False.
    :rtype: bool
    """
    try:
        # Try making a simple GET request to a known reliable URL (e.g., Google's homepage).
        response = requests.get("http://www.google.com", timeout=3)
        cache.internet = True
        return response.status_code == 200
    except requests.RequestException:
        cache.internet = False
        return False

def load_image_from_url(url, default=None):
    """
    Lädt ein Bild von einer angegebenen URL herunter und gibt das Bildobjekt zurück.

    Das Bild wird von der angegebenen URL abgerufen, erforderliche Daten werden im
    Speicher verarbeitet, und das Bild wird mithilfe von `Pillow` geöffnet und
    zurückgegeben.

    :param url: Die URL, von der das Bild heruntergeladen werden soll.
    :type url: str
    :return: Ein Bildobjekt, das die heruntergeladene Bilddatei repräsentiert.
    :rtype: PIL.Image.Image
    :raises requests.HTTPError: Wird ausgelöst, wenn die HTTP-Anfrage fehlschlägt, z.B. bei 404 oder 500.
    """
    logger.debug(f"load_image_from_url:{url}")
    if not cache.internet:
        if not default.endswith(".png") or not default.endswith(".jpg") or not default.endswith(".jpeg"):
            img_data = base64.b64decode(cache.user_default_avatar)
            img = Image.open(BytesIO(img_data))
        else:
            img = Image.open(default)
        logger.debug(f"img:{img}")
        return img

    try:
        response = requests.get(url)
        response.raise_for_status()  # Überprüft, ob die Anfrage erfolgreich war
        img_data = BytesIO(response.content)  # Bilddaten in einen BytesIO-Stream laden
        logger.debug(f"img_data:{img_data}")
        return Image.open(img_data)
    except requests.exceptions.RequestException as e:
        if default.endswith(".png") or default.endswith(".jpg") or default.endswith(".jpeg"):
            img = Image.open(default)
        else:
            img_data = base64.b64decode(cache.user_default_avatar)
            img = Image.open(BytesIO(img_data))
        logger.debug(f"img:{img}")
        return img

def load_image_from_base64(base64_string):
    """
    Decodiert einen Base64-kodierten Bild-String und lädt das Bild-Objekt.

    Diese Funktion nimmt einen Base64-kodierten Bild-String, dekodiert ihn und
    erzeugt ein Bild-Objekt, das weiterverwendet werden kann.

    :param base64_string: Der Base64-kodierte Bild-String.
    :type base64_string: str
    :return: Ein Bild-Objekt, das aus dem dekodierten Bild-String erstellt wurde.
    :rtype: Image
    """
    logger.debug(f"load_image_from_base64: {base64_string}")
    img_data = base64.b64decode(base64_string)
    img = Image.open(BytesIO(img_data))
    logger.debug(f"img:{img}")
    return img

def loadImage(image:str = None, defult_image=None, width: int = 48, height: int = 48):
    if image is None:
        image = cache.user_default_avatar  # Assuming 'cache' is predefined

    # Load image (from URL or base64)
    if image.startswith("http"):
        img = load_image_from_url(image, defult_image)
    else:
        img = load_image_from_base64(image)

    # Resize Image
    img = img.resize((width, height), PIL.Image.LANCZOS)

    # Make Image Rounded
    mask = Image.new("L", (width, height), 0)
    draw = PIL.ImageDraw.Draw(mask)
    draw.ellipse((0, 0, width, height), fill=255)

    rounded_img = Image.new("RGBA", (width, height))
    rounded_img.paste(img, (0, 0), mask)

    # Convert to Tkinter Image
    return ImageTk.PhotoImage(rounded_img)

def __apply_rounded_mask(image:PIL.Image):
    img = image.resize((48, 48), Image.LANCZOS)
    mask = Image.new("L", (48, 48), 0)
    draw = PIL.ImageDraw.Draw(mask)
    draw.ellipse((0, 0, 48, 48), fill=255)

    rounded_img = Image.new("RGBA", (48, 48))
    rounded_img.paste(img, (0, 0), mask)
    return rounded_img


def load_image(origin:str, passed_fallback:tkinter.PhotoImage=None, width: int = 48, height: int = 48)->tkinter.PhotoImage:
    """."""
    global fallback_image
    image:tkinter.PhotoImage = fallback_image
    if path.isfile(origin):
        image = tkinter.PhotoImage(file=origin)
    elif origin.startswith("http"):
        try:
            response = requests.get(origin)
            response.raise_for_status()  # Überprüft, ob die Anfrage erfolgreich war
            img_data = BytesIO(response.content)  # Bilddaten in einen BytesIO-Stream laden

            def image_resize():
                width = 500
                height = 300
                image_opened = Image.open(img_data)
                im2 = image_opened.resize((width, height), Image.LANCZOS)
                return im2

            #image_resize = image_resize()
            #image = ImageTk.PhotoImage(image_resize)
            return ImageTk.PhotoImage(__apply_rounded_mask(Image.open(img_data)))

            logger.debug(f"img_data:{img_data}")
            image = ImageTk.PhotoImage(Image.open(img_data).resize((width,height), Image.LANCZOS))
            print('img tk:'+str(image_tk.__class__))
        except requests.exceptions.RequestException as e:
            logger.error(f"error while getting image from url:{origin}")
            logger.error(f"reason:{e}")
    else:
        image = passed_fallback if passed_fallback else fallback_image
    return image


def load_fallback_images():
    """."""
    global fallback_image, fallback_user_avatar
    fallback_image = ImageTk.PhotoImage(Image.open(BytesIO(base64.b64decode('iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAYAAAAeP4ixAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsEAAA7BAbiRa+0AAABXSURBVGhD7c+xEcAgEMCwD/vvDCkYwslJjWs/+zU/sG4/z0iNkRojNUZqjNQYqTFSY6TGSI2RGiM1RmqM1BipMVJjpMZIjZEaIzVGaozUGKkxUmOkZeYAPMQEYN7/rhUAAAAASUVORK5CYII='))).resize((48, 48), Image.LANCZOS))
    fallback_user_avatar = ImageTk.PhotoImage(Image.open(BytesIO(base64.b64decode(''))))
